https://blog.csdn.net/qq_37894023/article/details/85060047?utm_medium=distribute.pc_relevant.none-task-blog-baidujs-2&spm=1001.2101.3001.4242
寻找已知物体检测博客。

开启风扇
sudo sh -c "echo 150 > /sys/devices/pwm-fan/target_pwm"

# how to  install vscode on ubuntu arm (tx2) optional
install code 

打开Chromiun

进入https://packagecloud.io/headmelted/codebuilds

点击Packsges

看右边列出来的包名

后缀带有arm64(aarch64)的，点击查看wget命令

wget --content-disposition https://packagecloud.io/headmelted/codebuilds/packages/debian/stretch/code-oss_1.32.0-1550644676_arm64.deb/download.deb

sudo dpkg -i code-oss_1.32.0-1550644676_arm64.deb

安装完成

compile：
ywz 20200804:
第一次尝试编译：
Could not find a package configuration file provided by "Pangolin" with any
  of the following names:

    PangolinConfig.cmake
    pangolin-config.cmake

拷贝以前的pangolin文件，进行编译安装
按照pangolin项目readme文件进行安装
cmake -DCMAKE_INSTALL_PREFIX=/home/emast/WorkSpace/lib/pangolin
编译安装后问题解决

第二次编译：
错误
-- Could NOT find CSPARSE (missing: CSPARSE_INCLUDE_DIR CSPARSE_LIBRARY) 
CMake Error: The following variables are used in this project, but they are set to NOTFOUND.
Please set them or make sure they are set and tested correctly in the CMake files:
CSPARSE_INCLUDE_DIR

解决方案：

运行 sudo apt-get install libsuitesparse-dev 安装相关依赖包。


第三次编译：
错误
error: no matching function for call to 'g2o::BlockSolver<g2o::BlockSolverTraits<6, 3> >::BlockSolver(g2o::BlockSolver<g2o::BlockSolverTraits<6, 3> >::LinearSolverType*&)'
      Block* solver_ptr = new Block ( linearSolver );     // 矩阵块求解器
应该是g2o版本更新导致用法变化的问题

参考博客更改代码 https://blog.csdn.net/robinhjwy/article/details/78084210
主要是更改了g2o的接口使用代码 PointMatch.cpp中
############
        // 初始化g2o
        typedef g2o::BlockSolver< g2o::BlockSolverTraits<6,3> > Block;  // pose 维度为 6, landmark 维度为 3
        // Block::LinearSolverType* linearSolver = new g2o::LinearSolverCSparse<Block::PoseMatrixType>(); // 线性方程求解器
        // g2o接口更改
        std::unique_ptr<Block::LinearSolverType> linearSolver ( new g2o::LinearSolverCSparse<Block::PoseMatrixType>());

        // Block* solver_ptr = new Block ( linearSolver );     // 矩阵块求解器
        // g2o接口更改
        std::unique_ptr<Block> solver_ptr ( new Block ( std::move(linearSolver)));     // 矩阵块求解器

        // g2o::OptimizationAlgorithmLevenberg* solver = new g2o::OptimizationAlgorithmLevenberg ( solver_ptr );
        // g2o接口更改
        g2o::OptimizationAlgorithmLevenberg* solver = new g2o::OptimizationAlgorithmLevenberg ( std::move(solver_ptr));
###############

第四次编译 错误：
../lib/libUAV_PROJECT.so: undefined reference to `g2o::csparse_extension::cs_chol_workspace(cs_di_sparse const*, cs_di_symbolic const*, int*, double*)'
../lib/libUAV_PROJECT.so: undefined reference to `g2o::csparse_extension::cs_cholsolsymb(cs_di_sparse const*, double*, cs_di_symbolic const*, double*, int*)'
../lib/libUAV_PROJECT.so: undefined reference to `g2o::csparse_extension::writeCs2Octave(char const*, cs_di_sparse const*, bool)'
collect2: error: ld returned 1 exit status

ld 错误 ，说明编译通过，主要是链接错误 可能是由于 安装g2o的时候没有安装csparse以来，需要重新编译一下g2o
解决方法：把g2o源码里的build先删掉，然后重新编译g2o，即安装了libsuitesparse后要重新编译g2o，可能需要重复上述操作两次以上，我重新编译了一次，ch7的程序make还是出错，再来一次就成功了。
sudo rm -r /usr/local/include/g2o
sudo rm -r /usr/local/lib/libg2o*
sudo rm -r /usr/local/bin/g2o*

第五次编译 错误没有变化：
../lib/libUAV_PROJECT.so: undefined reference to `g2o::csparse_extension::cs_chol_workspace(cs_di_sparse const*, cs_di_symbolic const*, int*, double*)'
../lib/libUAV_PROJECT.so: undefined reference to `g2o::csparse_extension::cs_cholsolsymb(cs_di_sparse const*, double*, cs_di_symbolic const*, double*, int*)'
../lib/libUAV_PROJECT.so: undefined reference to `g2o::csparse_extension::writeCs2Octave(char const*, cs_di_sparse const*, bool)'
collect2: error: ld returned 1 exit status
CMakeFiles/uav.dir/build.make:153: recipe for target '../bin/uav' failed
make[2]: *** [../bin/uav] Error 1
CMakeFiles/Makefile2:104: recipe for target 'CMakeFiles/uav.dir/all' failed
make[1]: *** [CMakeFiles/uav.dir/all] Error 2
Makefile:83: recipe for target 'all' failed
make: *** [all] Error 2

重新编译g2o 
过程中确认
A library with LAPACK API found.
-- Found CHOLMOD and its dependencies
-- Found CSPARSE: /usr/include/suitesparse  
-- Found OpenGL: /usr/lib/aarch64-linux-gnu/libOpenGL.so 

第六次编译 成功！！！！

运行时有个别图片报错
删除23 27 31 图片



设置g2o 
第一种方法：
在FindG2O.cmake 的 FindPATH中添加
/home/emast/WorkSpace/lib/g2o/include

第二种方法：
在CMAKELISTS.TXT中添加
list( APPEND CMAKE_MODULE_PATH /home/emast/WorkSpace/install/g2o/cmake_modules)
set(G2O_ROOT /home/emast/WorkSpace/lib/g2o/) 



编译问题：
No rule to make target '/usr/lib/aarch64-linux-gnu/libGL.so', needed by '../lib/libMonitor_PROJECT.so'.  Stop.
解决方案：
https://blog.csdn.net/moyu123456789/article/details/106361544
1.从github中https://github.com/NVIDIA/libglvnd路径下载libglvnd。

按照其中的readme进行编译，最后执行sudo make install进行安装。

2.对出错的库文件进行更新（软连接指向新安装的库文件）

安装后，会在/usr/local/lib/下出现libGL.so库文件，此时进入/usr/lib/gcc/aarch64-linux-gnu/目录，执行一下操作：

sudo rm libGL.so

sudo ln -s /usr/local/lib/libGL.so libGL.so 



疑问：

1、匹配使用的是全部的特征点么？
//src\PointMatch.cpp 中
matcher_flann_.match( descriptors_ref_, descriptors_curr_, matches );
descriptors_ref_ 由以下内容获得
//demo.cpp中
vo->descriptors_ref_=descriptors;

descriptors 由 descriptors_1 获得
for ( size_t i=0; i<keypoints1.size(); i++ )
{
  while(myfile>>num>>x>>y>>z)
  {
      if(i==num)//3d
      {
          descriptors.push_back(descriptors_1.row(i).clone());
          //...
      }
      //...
  }
  //...
}
这里 假如3d点的num序列有 5、22、78、100 共四个
那么 
descriptors[0] = descriptors_1.row(5)
descriptors[1] = descriptors_1.row(22)
descriptors[2] = descriptors_1.row(78)
descriptors[3] = descriptors_1.row(100)
那么descriptors_ref_ 也就只有四个，所以在进行匹配时使用descriptors_ref_ 应该没有使用所有的特征点？

2、3d点使用的序号

for
    while(myfile>>num>>x>>y>>z)
    {
        if(i==num)
        {
            Point3f p_world;
            p_world.x=x;
            p_world.y=y;
            p_world.z=z;
            pF_ini->pts_3d_ref_.push_back(p_world);
            keypoints.push_back(keypoints1[i]);
            descriptors.push_back(descriptors_1.row(i).clone());
        }
        else
        {
            continue;
        }
    }
}
这里
pts_3d_ref_[0] = p_world  // 第5个3d点
pts_3d_ref_[1] = p_world  // 第22个3d点
pts_3d_ref_[2] = p_world  // 第78个3d点
pts_3d_ref_[3] = p_world  // 第100个3d点

vo->pts_3d_=pF_ini->pts_3d_ref_;

而在估计RT时：
void PointMatch:: pose_estimation_3d2d (std::vector< DMatch > matches,Mat& R, Mat& t )
{
    cout<<"ref_->pts_3d_ref_.size:"<<pts_3d_.size()<<endl;

    for ( DMatch m:matches )
    {
        Point3f p1 = pts_3d_[m.queryIdx];  
        // queryIdx 是指当matcher（descriptors_ref_, descriptors_curr_）中的 descriptors_ref_的 id
        // 分别为  0,1, 2, 3 
        // 对应的 pts_3d_ 0，1，2，3 分别为3d点 索引 为 0 ， 22， 78 ，100 , 这里倒没有错误
        pts_3d.push_back ( p1);
        pts_2d.push_back ( keypoints_curr_[m.trainIdx].pt );

    }
    solvePnP ( pts_3d, pts_2d, K, Mat(), R, t, false, SOLVEPNP_EPNP )

3、找出匹配最小距离时的方法
    Dmatchs 的结构

4、 更改匹配策略 使用所有的特征点进行匹配
修改对应的序列号
匹配时matcher_flann_.match( descriptors_all_ref_, descriptors_curr_, matches );




5、使用ransac
vector<Point2f> srcPoints(matche_final.size()),dstPoints(matche_final.size());
//保存从关键点中提取到的匹配点对的坐标
for(int i=0;i<matche_final.size();i++)
{
    srcPoints[i]=keypoints11[matche_final[i].queryIdx].pt;
    dstPoints[i]=keypoints22[matche_final[i].trainIdx].pt;
}
//保存计算的单应性矩阵
Mat homography;
//保存点对是否保留的标志
vector<unsigned char> inliersMask1(srcPoints.size());
//匹配点对进行RANSAC过滤
homography = findHomography(srcPoints,dstPoints,CV_RANSAC,5,inliersMask1);
//RANSAC过滤后的点对匹配信息
vector<DMatch> matches_ransac;
//手动的保留RANSAC过滤后的匹配点对
for(int i=0;i<inliersMask1.size();i++)
{
    if(inliersMask1[i])
    {
        matches_ransac.push_back(matche_final[i]);
        //cout<<"第"<<i<<"对匹配："<<endl;
        //cout<<"queryIdx:"<<matches[i].queryIdx<<"\ttrainIdx:"<<matches[i].trainIdx<<endl;
        //cout<<"imgIdx:"<<matches[i].imgIdx<<"\tdistance:"<<matches[i].distance<<endl;
    }
}

待解决问题：
1 、提出匹配点对 ，使用ORB时普遍的点对距离小于30，需要对比使用breask或者其他的特征点描述子时是什么样的距离情况
    extract ORB cost = 0.0502806 seconds. 
    corners.size():492
    keypoints_curr_.size()492
    match.size()= 5
    -- Max dist : 22.000000 
    -- Min dist : 5.000000 

  修改匹配策略，先使用参考帧中所有特征点进行匹配，之后使用主方向进行删选，然后使用3d点进行删选。
  修改项：
  1 matcher->match ( descriptors_all_ref_, descriptors_curr_, match );
  2 drawMatches 
  3 添加主方向删除
  4 添加3d点删除
  5 使用ransac
  修改之后发现，在使用图片进行匹配时，基本没有误匹配。


2、 位姿计算错误
0 trans:  299.812 199.423 -665.257
经过修正匹配策略，推测位姿计算跳变还是因为给出3d位置的点太少，或者给出的3d位置是错误的。
下一步给出准确的3d点位置，来看看结果
至于坐标方向错误的原因，暂时没有找到。





